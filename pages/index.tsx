import Head from 'next/head'
import { InboxOutlined } from '@ant-design/icons';
import { Col, Collapse, Form, Radio, RadioChangeEvent, Row, Select, Statistic, UploadFile, UploadProps } from 'antd';
import { message, Upload } from 'antd';
import { useEffect, useState } from 'react';
import ExifReader from 'exifreader';
import styles from '../styles/home.module.css'
import { RcFile } from 'antd/es/upload';
import { useRouter } from 'next/router';
import convertUrlToImageData from '../utils';

const { Dragger } = Upload;
const { Panel } = Collapse;

const ExifInfo = {
  FocalLength: 'FocalLength',
  LensModel: 'LensModel',
  ISOSpeedRatings: 'ISOSpeedRatings',
  ExposureTime: 'ExposureTime',
  FNumber: 'FNumber'
}

const ExifInfoTitle = {
  [ExifInfo.FocalLength]: '焦距',
  [ExifInfo.LensModel]: '镜头',
  [ExifInfo.ISOSpeedRatings]: 'ISO',
  [ExifInfo.ExposureTime]: '曝光时长',
  [ExifInfo.FNumber]: '光圈',
}

const options = [
  { value: ExifInfo.FocalLength, label: ExifInfoTitle[ExifInfo.FocalLength] },
  { value: ExifInfo.ExposureTime, label: ExifInfoTitle[ExifInfo.ExposureTime] },
  { value: ExifInfo.ISOSpeedRatings, label: ExifInfoTitle[ExifInfo.ISOSpeedRatings] },
  { value: ExifInfo.LensModel, label: ExifInfoTitle[ExifInfo.LensModel], },
  { value: ExifInfo.FNumber, label: ExifInfoTitle[ExifInfo.FNumber], }
];

const spanMap: { [key: string]: any } = {
  LensModel: 24
}
const formatParamValue = (name: string, value: any) => {
  return value?.description
}

const formatOptionsLabel = (value: string) => options.find(item => item.value === value)?.label || ''


export default function Home() {
  const router = useRouter()
  const { img_url } = router.query

  const [exifInfo, setExifInfo] = useState<any>({})
  const [arrangement, setArrangement] = useState('horizontal');
  const [parameters, setParameters] = useState(Object.keys(ExifInfo));

  const onChangeArrangement = (e: RadioChangeEvent) => {
    setArrangement(e.target.value);
  };

  useEffect(() => {
    if (!img_url) return
    convertUrlToImageData(img_url as string)
      .then(ExifReader.load)
      .then(setExifInfo)
      .catch(() => {
        message.error('Something went wrong.');
      })
  }, [img_url])

  const props: UploadProps = {
    name: 'file',
    multiple: false,
    maxCount: 1,
    async onChange(info) {
      // removing file
      if (info.fileList.length === 0) {
        setExifInfo({})
        return
      }
      const { status } = info.file;
      if (status === 'done') {
        const tag = await ExifReader.load(info.file.originFileObj as any)
        setExifInfo(tag || {})
        message.success(`${info.file.name} file uploaded successfully.`);
      } else if (status === 'error') {
        message.error(`${info.file.name} file upload failed.`);
      }
    },
    customRequest: ({ file, onSuccess }) => {
      onSuccess?.({})
      return {
        abort() {
          console.log('upload progress is aborted.');
        },
      };
    },
    onPreview: async (file: UploadFile) => {
      let src = file.url as string;
      if (!src) {
        src = await new Promise((resolve) => {
          const reader = new FileReader();
          reader.readAsDataURL(file.originFileObj as RcFile);
          reader.onload = () => resolve(reader.result as string);
        });
      }
      const image = document.createElement("img");
      image.src = src;
      image.style.width = '100%'
      const imgWindow = window.open(src);
      imgWindow?.document.write(image.outerHTML);
    },
    onDrop(e) {
      console.log('Dropped files', e.dataTransfer.files);
    },
  };

  let textInfo = null
  if (arrangement === 'horizontal') {
    textInfo = <p>{parameters.map(param => `${formatOptionsLabel(param)}: ${formatParamValue(param, exifInfo[param])} `).join(' ')}</p>
  } else if (arrangement === 'vertical') {
    textInfo = parameters.map(param => <p key={param}>{`${formatOptionsLabel(param)}: ${formatParamValue(param, exifInfo[param])} `}</p>)
  }

  return (
    <>
      <Head>
        <title>Photo Exif Viewer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='container'>
        <div dangerouslySetInnerHTML={
          {
            __html: `
              <a href="https://github.com/vv13/photo-exif-viewer" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>
          `}}
        ></div>
        <Row gutter={24}>
          <Col offset={4} span={8} >
            <div>
              {img_url ? <img src={img_url as string} alt="img url" style={{ width: '100%' }} /> : (
                <Dragger {...props} className={styles.uploader} listType="picture">
                  <p className="ant-upload-drag-icon">
                    <InboxOutlined alt='' rev={undefined}/>
                  </p>
                  <p className="ant-upload-text">Click or drag file to this area to upload</p>
                  <p className="ant-upload-hint">
                    Support for a single or bulk upload. Strictly prohibit from uploading company data or other
                    band files
                  </p>
                </Dragger>
              )}
            </div>
          </Col>
          <Col span={8} >
            <Form.Item label="选取参数">
              <Select
                mode="multiple"
                showArrow
                options={options}
                value={parameters}
                onChange={value => setParameters(value)}
              />
            </Form.Item>
            {
              Object.keys(exifInfo).length === 0 ? '暂无信息，请上传图片' : <div>
                <Row>
                  {parameters.map(item => <Col key={item} span={spanMap[item] || 12}><Statistic title={formatOptionsLabel(item)} value={formatParamValue(item, exifInfo[item])} /></Col>)}
                </Row>
                <Collapse defaultActiveKey={['1']} ghost>
                  <Panel header="文本信息" key="1">
                    <Form.Item label="文字排列方式">
                      <Radio.Group onChange={onChangeArrangement} value={arrangement}>
                        <Radio value={'horizontal'}>横向</Radio>
                        <Radio value={'vertical'}>纵向</Radio>
                      </Radio.Group>
                    </Form.Item>
                    {textInfo}
                  </Panel>
                </Collapse>
              </div>
            }
          </Col>
        </Row>
      </main >
    </>
  )
}
